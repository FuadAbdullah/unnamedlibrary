/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unnamedlibrary;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author FuadAbdullah
 */
public class unnamedRegisterMenu extends javax.swing.JFrame {
    
    // <editor-fold defaultstate="collapsed" desc="Register Menu Private Variables"> 
    // Description for private variables
    // -------------------------------------
    // lID stores librarian ID
    // lpfix stores librarian prefix
    // saveDir stores working directory
    // fgtxt is the color code seen in the normal label and text. Default color.
    // newLibrarianID stores new librarian ID after increment
    // -------------------------------------
    // String brtxt, ctxt, btxt, ext, cspecies, brID, cID, bID, lID, saveDir;
    private String lID, saveDir;
    private final String lpfix = "LIB";// For book and borrow ID prefixes
    private Color fgtxt = new Color(187,187,187); // Default foreground color for text
    private int newLibrarianID; // To store new book ID
    // </editor-fold>
    
    // Register menu constructor
    public unnamedRegisterMenu() {
        initComponents();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMain = new javax.swing.JPanel();
        panTop = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        lblLibrarianDetailsTitle = new javax.swing.JLabel();
        panCenter = new javax.swing.JPanel();
        panFormCont = new javax.swing.JPanel();
        panBar = new javax.swing.JPanel();
        btnRegister = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        panForm = new javax.swing.JPanel();
        lblLibrarianFirstName = new javax.swing.JLabel();
        lblLibrarianLastName = new javax.swing.JLabel();
        lblLibrarianDoB = new javax.swing.JLabel();
        lblLibrarianGender = new javax.swing.JLabel();
        lblLibrarianPhoneNumber = new javax.swing.JLabel();
        lblLibrarianEmailAddress = new javax.swing.JLabel();
        txtLibrarianFirstName = new javax.swing.JTextField();
        txtLibrarianLastName = new javax.swing.JTextField();
        txtLibrarianDoB = new javax.swing.JFormattedTextField();
        txtLibrarianPhoneNumber = new javax.swing.JFormattedTextField();
        txtLibrarianEmailAddress = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLibrarianHomeAddress = new javax.swing.JTextArea();
        lblLibrarianHomeAddress = new javax.swing.JLabel();
        cbxLibrarianGender = new javax.swing.JComboBox<>();
        lblLibrarianUsername = new javax.swing.JLabel();
        lblLibrarianRepeatPass = new javax.swing.JLabel();
        lblLibrarianPassword = new javax.swing.JLabel();
        txtLibrarianUsername = new javax.swing.JTextField();
        txtLibrarianPassword = new javax.swing.JPasswordField();
        txtLibrarianRepeatPass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage books - unnamed Library Management System");
        setName("unnamedBook"); // NOI18N
        setResizable(false);

        panMain.setBackground(new java.awt.Color(51, 51, 51));
        panMain.setMaximumSize(new java.awt.Dimension(600, 680));
        panMain.setMinimumSize(new java.awt.Dimension(600, 680));
        panMain.setPreferredSize(new java.awt.Dimension(600, 680));
        panMain.setLayout(new java.awt.BorderLayout());

        panTop.setBackground(new java.awt.Color(43, 44, 45));
        panTop.setMaximumSize(new java.awt.Dimension(1218, 160));
        panTop.setMinimumSize(new java.awt.Dimension(1218, 160));

        btnCancel.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnCancel.setText("Return");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblLibrarianDetailsTitle.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 24)); // NOI18N
        lblLibrarianDetailsTitle.setText("Librarian Registration Form");

        javax.swing.GroupLayout panTopLayout = new javax.swing.GroupLayout(panTop);
        panTop.setLayout(panTopLayout);
        panTopLayout.setHorizontalGroup(
            panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLibrarianDetailsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        panTopLayout.setVerticalGroup(
            panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(lblLibrarianDetailsTitle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panMain.add(panTop, java.awt.BorderLayout.PAGE_START);

        panCenter.setBackground(new java.awt.Color(34, 34, 34));
        panCenter.setLayout(new java.awt.GridLayout(1, 0));

        panFormCont.setBackground(new java.awt.Color(28, 28, 28));
        panFormCont.setLayout(new java.awt.BorderLayout());

        panBar.setBackground(new java.awt.Color(33, 31, 31));
        panBar.setMaximumSize(new java.awt.Dimension(609, 70));
        panBar.setMinimumSize(new java.awt.Dimension(609, 70));
        panBar.setPreferredSize(new java.awt.Dimension(609, 70));

        btnRegister.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnRegister.setText("Register");
        btnRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panBarLayout = new javax.swing.GroupLayout(panBar);
        panBar.setLayout(panBarLayout);
        panBarLayout.setHorizontalGroup(
            panBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBarLayout.createSequentialGroup()
                .addContainerGap(408, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegister)
                .addGap(19, 19, 19))
        );
        panBarLayout.setVerticalGroup(
            panBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBarLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(panBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegister)
                    .addComponent(btnReset))
                .addGap(16, 16, 16))
        );

        panFormCont.add(panBar, java.awt.BorderLayout.PAGE_END);

        panForm.setBackground(new java.awt.Color(28, 28, 28));

        lblLibrarianFirstName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianFirstName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianFirstName.setText("First Name:");

        lblLibrarianLastName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianLastName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianLastName.setText("Last Name:");

        lblLibrarianDoB.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianDoB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianDoB.setText("Date of Birth:");

        lblLibrarianGender.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianGender.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianGender.setText("Gender:");

        lblLibrarianPhoneNumber.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianPhoneNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianPhoneNumber.setText("Phone Number:");

        lblLibrarianEmailAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianEmailAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianEmailAddress.setText("Email Address:");

        txtLibrarianFirstName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        txtLibrarianLastName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        txtLibrarianDoB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtLibrarianDoB.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        try {
            txtLibrarianPhoneNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtLibrarianPhoneNumber.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        txtLibrarianEmailAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtLibrarianEmailAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLibrarianEmailAddressFocusLost(evt);
            }
        });

        txtLibrarianHomeAddress.setColumns(20);
        txtLibrarianHomeAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtLibrarianHomeAddress.setLineWrap(true);
        txtLibrarianHomeAddress.setRows(3);
        jScrollPane2.setViewportView(txtLibrarianHomeAddress);

        lblLibrarianHomeAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianHomeAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianHomeAddress.setText("Home Address:");

        cbxLibrarianGender.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        cbxLibrarianGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Male", "Female" }));
        cbxLibrarianGender.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblLibrarianUsername.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianUsername.setText("Username:");

        lblLibrarianRepeatPass.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianRepeatPass.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianRepeatPass.setText("Repeat Password:");

        lblLibrarianPassword.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblLibrarianPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLibrarianPassword.setText("Password:");

        txtLibrarianUsername.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        txtLibrarianPassword.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtLibrarianPassword.setToolTipText("Insert your password");

        txtLibrarianRepeatPass.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtLibrarianRepeatPass.setToolTipText("Insert your password");

        javax.swing.GroupLayout panFormLayout = new javax.swing.GroupLayout(panForm);
        panForm.setLayout(panFormLayout);
        panFormLayout.setHorizontalGroup(
            panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFormLayout.createSequentialGroup()
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panFormLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panFormLayout.createSequentialGroup()
                                .addComponent(lblLibrarianPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(txtLibrarianPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panFormLayout.createSequentialGroup()
                                .addComponent(lblLibrarianEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(txtLibrarianEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panFormLayout.createSequentialGroup()
                                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLibrarianHomeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLibrarianGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxLibrarianGender, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panFormLayout.createSequentialGroup()
                                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblLibrarianFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLibrarianDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLibrarianUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLibrarianRepeatPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLibrarianPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(35, 35, 35)
                                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLibrarianFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLibrarianDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLibrarianLastName)
                                    .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtLibrarianRepeatPass, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtLibrarianPassword, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtLibrarianUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))))))
                    .addGroup(panFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblLibrarianLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(354, 354, 354)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        panFormLayout.setVerticalGroup(
            panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panFormLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLibrarianUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrarianUsername))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLibrarianPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrarianPassword))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLibrarianRepeatPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrarianRepeatPass))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrarianFirstName)
                    .addComponent(txtLibrarianFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLibrarianLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrarianLastName))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrarianDoB)
                    .addComponent(txtLibrarianDoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrarianGender)
                    .addComponent(cbxLibrarianGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrarianPhoneNumber)
                    .addComponent(txtLibrarianPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibrarianEmailAddress)
                    .addComponent(txtLibrarianEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibrarianHomeAddress))
                .addGap(19, 19, 19))
        );

        panFormCont.add(panForm, java.awt.BorderLayout.CENTER);

        panCenter.add(panFormCont);

        panMain.add(panCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(panMain, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleName("Register a librarian - unnamed Library Management System");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Button Events">
    
    // This method returns the user to login menu via return button
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selection = JOptionPane.showConfirmDialog(null, "Closing this form now will cancel the ongoing registration. Continue?", "Returning to login screen!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            new unnamedLoginMenu().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    // This method handles registration of librarian into the system via register button
    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        // Reset the highlighted empty fields to original foreground color
        deHighlightEmpty();
        // To add the client
        addLibrarianInformation();
    }//GEN-LAST:event_btnRegisterActionPerformed

    // This method resets the registration form via reset button
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        deHighlightEmpty();
        clearLibrarian();
    }//GEN-LAST:event_btnResetActionPerformed

    // This method triggers for email validation after email textfield loses focus
    private void txtLibrarianEmailAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLibrarianEmailAddressFocusLost
        // TODO add your handling code here:
//        final String txt = txtLibrarianEmailAddress.getText();
//        invalidStringEmail(txt, txtLibrarianEmailAddress, true);
        unnamedEmailValidation vd = new unnamedEmailValidation();     
        vd.runValidate(txtLibrarianEmailAddress, true);
    }//GEN-LAST:event_txtLibrarianEmailAddressFocusLost

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Methods">
    
    // This method is to delete the session cache upon logout
    private void cacheClear(){
        try {
            // To get directory  
            saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
            File cache = new File(saveDir + "cache.txt");
            if (cache.exists()) {
                cache.delete();
            }
        } catch (Exception ex) {
            
        }
    }
    
    // This method handles username validation to check if 
    // the username has already been taken by comparing
    // records in the librarian text file
    private boolean usernameValidator(){
        // Assigning the lID to the selected index value
        String userTemp = txtLibrarianUsername.getText();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        boolean notAvailable = false;
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File librariantxt = new File(saveDir + "librarian.txt");
        Scanner intLibrarian;
        try {
            if (!librariantxt.exists()) {
                librariantxt.createNewFile();
            }   
            // This part loads all book information
            intLibrarian = new Scanner(librariantxt);
            // Read lines from the file until no more are left.
            while (intLibrarian.hasNext())
            {
                // Read the next line.
                String lEntry = intLibrarian.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = lEntry.split(":");
                // matchedID[0] = matchedID[0].replace("LIB", "");
                // JOptionPane.showMessageDialog(null, i);
                if (userTemp.equals(matchedID[1])) {
                     notAvailable = true;
                }
            }
            intLibrarian.close();
        } catch (Exception ex) {
            
        }
        return notAvailable;
    }
    
    // This method handles password comparison 
    private boolean similarPassword(){
        boolean isSimilar = false;
        String currPass = String.valueOf(txtLibrarianPassword.getPassword());
        String comparePass = String.valueOf(txtLibrarianRepeatPass.getPassword());
        if ("".equals(currPass) || "".equals(comparePass)) {
            isSimilar = false;
        } else if (currPass.equals(comparePass)) {
            isSimilar = true;
        }
        return isSimilar;
    }
    
    // This method handles the insertion of client
    private void addLibrarianInformation(){ 
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("000000");
        try {
            // Fetching IDs from the textfields
            lID = dc.format(newLibrarianID);
            // Check if textfields are empty
            emptyFields();
            // To check username availability
            if (usernameValidator()) {
                throw new Exception("Username taken.");
            }
            // To check password similarity
            if (!similarPassword()) {
                throw new Exception("Password mismatch");
            }
            // Storing Borrowing entries into variables
            // Checking if gender is unselected
            if (cbxLibrarianGender.getSelectedIndex() <= 0) {
                JOptionPane.showMessageDialog(null, "Gender is unset! Autosetting value to male", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
                cbxLibrarianGender.setSelectedIndex(1); // Setting the gender to male which is index 1
            }
            String lUsername = txtLibrarianUsername.getText();
            String lPassword = String.valueOf(txtLibrarianPassword.getPassword());
            String lRPassword = String.valueOf(txtLibrarianRepeatPass.getPassword());
            String lFirstName = txtLibrarianFirstName.getText();
            String lLastName = txtLibrarianLastName.getText();
            String lDoB = txtLibrarianDoB.getText();
            String lGender = (String) cbxLibrarianGender.getSelectedItem();
            String lPhoneNumber = txtLibrarianPhoneNumber.getText();
            String lEmailAddress = txtLibrarianEmailAddress.getText();
            String lHomeAddress  = txtLibrarianHomeAddress.getText();
            // FileWriter and PrintWriter to create and write into book.txt
            try {
                // FileWriter to write into a new file called client.txt
                FileWriter ld = new FileWriter(saveDir + "librarian.txt", true); 
                // PrintWriter to print into client.txt
                PrintWriter ldp = new PrintWriter(ld); 
                // To print the line into Borrowing textfile
                ldp.println(lpfix + lID + ":" +
                             lUsername + ":" +
                             lPassword + ":" +
                             lFirstName + ":" +
                             lLastName + ":" +
                             lDoB + ":" +
                             lGender + ":" +
                             lPhoneNumber + ":" + 
                             lEmailAddress + ":" +
                             lHomeAddress + ":" +
                             "false"); // false to indicate hasn't been deleted status
                ldp.close();
                // To display completed borrowing process status
                JOptionPane.showMessageDialog(null, "You have been successfully registered as a librarian! Press OK to return to librarian registration form.", "Account creation succeeded!", JOptionPane.INFORMATION_MESSAGE);
                // To refresh new ID 
                librarianIncrementor();
                // JOptionPane.showMessageDialog(null, newLibrarianID);
            } catch (IOException ex) {
                Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            highlightEmpty();
            if (usernameValidator()) {
                JOptionPane.showMessageDialog(null, "Username is already taken by another librarian! Use a different username to proceed.", "Username is in use!", JOptionPane.WARNING_MESSAGE);
            }
            if (!similarPassword()) {
                JOptionPane.showMessageDialog(null, "Password is not matching!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
            } 
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }      
    }
    
    // This method clears librarian related fields
    private void clearLibrarian(){
        // To clean up previous or default values from fields
        txtLibrarianUsername.setText("");
        txtLibrarianPassword.setText("");
        txtLibrarianRepeatPass.setText("");
        txtLibrarianFirstName.setText("");
        txtLibrarianLastName.setText("");
        txtLibrarianDoB.setText("");
        cbxLibrarianGender.setSelectedIndex(0);
        txtLibrarianPhoneNumber.setText("");
        txtLibrarianEmailAddress.setText("");
        txtLibrarianHomeAddress.setText("");
        lID = "";
    }
    
    // This method will check through librarian.txt and look for latest ID and increments from there
    private void librarianIncrementor(){
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
        boolean hasRecord = false;
        try {
            saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
            // For debugging purpose only
            // JOptionPane.showMessageDialog(null, bID);
            // JOptionPane.showMessageDialog(null, saveDir);
            File librariantxt = new File(saveDir + "librarian.txt");
            if (!librariantxt.exists()) {
                librariantxt.createNewFile();
            }
            Scanner inputFile;
            try {
                inputFile = new Scanner(librariantxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext())
                {
                   // Read the next line.
                   String lEntry = inputFile.nextLine();
                   // Split the line by using the delimiter ":" (semicolon) and store into array.
                   matchedID = lEntry.split(":");
                   matchedID[0] = matchedID[0].replace("LIB", "");
                   hasRecord = true;
                }
                inputFile.close();
                if (!hasRecord) {
                    JOptionPane.showMessageDialog(null, "No librarian(s) record was found! Restarting database entry.", "Librarian database is empty!", JOptionPane.ERROR_MESSAGE);
                    newLibrarianID = 1;
                } else {
                    newLibrarianID = Integer.parseInt(matchedID[0]) + 1;
                }
                // JOptionPane.showMessageDialog(null, newLibrarianID);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Librarian ID can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // This method will highlight empty fields with yellow color upon call
    private void highlightEmpty() {
        if ("".equals(txtLibrarianUsername.getText())) {
            lblLibrarianUsername.setForeground(Color.yellow);
        }
        if ("".equals(String.valueOf(txtLibrarianPassword.getPassword()))) {
            lblLibrarianPassword.setForeground(Color.yellow);
        }
        if ("".equals(String.valueOf(txtLibrarianRepeatPass.getPassword()))) {
            lblLibrarianRepeatPass.setForeground(Color.yellow);
        }
        if ("".equals(txtLibrarianFirstName.getText())) {
            lblLibrarianFirstName.setForeground(Color.yellow);
        }
        if ("".equals(txtLibrarianLastName.getText())) {
            lblLibrarianLastName.setForeground(Color.yellow);
        }
        if ("".equals(txtLibrarianDoB.getText())) {
            lblLibrarianDoB.setForeground(Color.yellow);
        }
        if ("          ".equals(txtLibrarianPhoneNumber.getText())) {
            lblLibrarianPhoneNumber.setForeground(Color.yellow);
        }
        if ("".equals(txtLibrarianEmailAddress.getText())) {
            lblLibrarianEmailAddress.setForeground(Color.yellow);
        }
        if ("".equals(txtLibrarianHomeAddress.getText())) {
            lblLibrarianHomeAddress.setForeground(Color.yellow);
        }   
    }
    
    // This method will reset the color of the highlighted labels to default foreground
    private void deHighlightEmpty(){
        lblLibrarianUsername.setForeground(fgtxt);
        lblLibrarianPassword.setForeground(fgtxt);
        lblLibrarianRepeatPass.setForeground(fgtxt);
        lblLibrarianFirstName.setForeground(fgtxt);
        lblLibrarianLastName.setForeground(fgtxt);
        lblLibrarianDoB.setForeground(fgtxt);
        lblLibrarianPhoneNumber.setForeground(fgtxt);
        lblLibrarianEmailAddress.setForeground(fgtxt);
        lblLibrarianHomeAddress.setForeground(fgtxt);
    }
    
    // This method is to handle empty book fields
    // Create a new exception class!
    private void emptyFields() throws Exception {
        unnamedEmailValidation vd = new unnamedEmailValidation();
        if ("".equals(txtLibrarianUsername.getText())) {
            throw new Exception("Empty username");
        }
        if ("".equals(String.valueOf(txtLibrarianPassword.getPassword()))) {
            throw new Exception("Empty password");
        }
        if ("".equals(String.valueOf(txtLibrarianRepeatPass.getPassword()))) {
            throw new Exception("Empty repeat password");
        }
        if ("".equals(txtLibrarianFirstName.getText())) {
            throw new Exception("Empty first name");
        }
        if ("".equals(txtLibrarianLastName.getText())) {
            throw new Exception("Empty last name");
        }
        if ("".equals(txtLibrarianDoB.getText())) {
            throw new Exception("Empty date of birth");
        }
        if ("          ".equals(txtLibrarianPhoneNumber.getText())) {
            throw new Exception("Empty phone number");
        }
        if ("".equals(txtLibrarianEmailAddress.getText())) {
            throw new Exception("Empty email address");
        }
        if ("".equals(txtLibrarianHomeAddress.getText())) {
            throw new Exception("Empty home address");
        }
        if (vd.runValidate(txtLibrarianEmailAddress, false)) {
            throw new Exception("Invalid email address format");
        }
    }
    
    // This method handles all validation related to the fields
    private void inputCharacterValidator(){
        txtLibrarianUsername.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedUsernameValidation vd = new unnamedUsernameValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianUsername);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianUsername);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianUsername);
            }
        });
        txtLibrarianPassword.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedPasswordValidation vd = new unnamedPasswordValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianPassword);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianPassword);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianPassword);
            }
        });
        
        txtLibrarianRepeatPass.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedPasswordValidation vd = new unnamedPasswordValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianRepeatPass);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianRepeatPass);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianRepeatPass);
            }
        });
        txtLibrarianFirstName.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedFirstNameValidation vd = new unnamedFirstNameValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianFirstName);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianFirstName);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianFirstName);
            }
        });
        txtLibrarianLastName.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedLastNameValidation vd = new unnamedLastNameValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianLastName);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianLastName);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianLastName);
            }
        });
        txtLibrarianHomeAddress.getDocument().addDocumentListener(new unnamedDocumentListener() {
            unnamedAddressValidation vd = new unnamedAddressValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtLibrarianHomeAddress);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianHomeAddress);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtLibrarianHomeAddress);
            }
        });
    }
    
    // This is the form load method
    private void initGUI(){
        // Set the initial value for new book
        librarianIncrementor();
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    cacheClear();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        inputCharacterValidator();
    }
    
    // </editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize FlatDarkLaf");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new unnamedRegisterMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cbxLibrarianGender;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLibrarianDetailsTitle;
    private javax.swing.JLabel lblLibrarianDoB;
    private javax.swing.JLabel lblLibrarianEmailAddress;
    private javax.swing.JLabel lblLibrarianFirstName;
    private javax.swing.JLabel lblLibrarianGender;
    private javax.swing.JLabel lblLibrarianHomeAddress;
    private javax.swing.JLabel lblLibrarianLastName;
    private javax.swing.JLabel lblLibrarianPassword;
    private javax.swing.JLabel lblLibrarianPhoneNumber;
    private javax.swing.JLabel lblLibrarianRepeatPass;
    private javax.swing.JLabel lblLibrarianUsername;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCenter;
    private javax.swing.JPanel panForm;
    private javax.swing.JPanel panFormCont;
    private javax.swing.JPanel panMain;
    private javax.swing.JPanel panTop;
    private javax.swing.JFormattedTextField txtLibrarianDoB;
    private javax.swing.JTextField txtLibrarianEmailAddress;
    private javax.swing.JTextField txtLibrarianFirstName;
    private javax.swing.JTextArea txtLibrarianHomeAddress;
    private javax.swing.JTextField txtLibrarianLastName;
    private javax.swing.JPasswordField txtLibrarianPassword;
    private javax.swing.JFormattedTextField txtLibrarianPhoneNumber;
    private javax.swing.JPasswordField txtLibrarianRepeatPass;
    private javax.swing.JTextField txtLibrarianUsername;
    // End of variables declaration//GEN-END:variables
}
