/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unnamedlibrary;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/**
 *
 * @author fab07
 */
public class unnamedBorrowMenu extends javax.swing.JFrame {

    String brtxt, ctxt, btxt, ext, cspecies, brID, cID, bID, saveDir;
    boolean cerr, berr, brerr; // Client error, book error, borrow date error, borrowing id error
    boolean fetchedClient, fetchedBook, selectedDate; // Booleans for client and book fetch statuses
    final String bpfix = "BOO", brpfix = "BOR"; // For book and borrow ID prefixes
    Color fgtxt = new Color(187,187,187); // Default foreground color for text
    int ctype; // Value to represent selected Client combo box
    DefaultComboBoxModel cList, bkList; // ComboBoxModel for Book ID
     
    private void testIconDisplay(){
    }
    
    /**
     * Creates new form unnamedBorrowMenu
     */
    public unnamedBorrowMenu() {
        initComponents();
        testIconDisplay();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMain = new javax.swing.JPanel();
        panTop = new javax.swing.JPanel();
        cbxClientType = new javax.swing.JComboBox<>();
        lblClientID = new javax.swing.JLabel();
        lblBookID = new javax.swing.JLabel();
        txtBorrowDate = new javax.swing.JFormattedTextField();
        btnGetDate = new javax.swing.JButton();
        lblBorrowDate = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblBorrowID = new javax.swing.JLabel();
        lblBorrowDue = new javax.swing.JLabel();
        txtBorrowID = new javax.swing.JFormattedTextField();
        txtBorrowDue = new javax.swing.JFormattedTextField();
        btnCancel = new javax.swing.JButton();
        btnSetDate = new javax.swing.JButton();
        cbxClientID = new javax.swing.JComboBox<>();
        cbxBookID = new javax.swing.JComboBox<>();
        panCenter = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblClientTitle = new javax.swing.JLabel();
        lblClientFirstName = new javax.swing.JLabel();
        lblClientLastName = new javax.swing.JLabel();
        lblClientDoB = new javax.swing.JLabel();
        lblClientGender = new javax.swing.JLabel();
        lblClientPhoneNumber = new javax.swing.JLabel();
        lblClientEmailAddress = new javax.swing.JLabel();
        lblClientHomeAddress = new javax.swing.JLabel();
        txtClientFirstName = new javax.swing.JTextField();
        txtClientLastName = new javax.swing.JTextField();
        txtClientDoB = new javax.swing.JFormattedTextField();
        txtClientPhoneNumber = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtClientHomeAddress = new javax.swing.JTextArea();
        txtClientEmailAddress = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtClientGender = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSubmit = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblBookDetailsTitle = new javax.swing.JLabel();
        lblBookTitle = new javax.swing.JLabel();
        lblBookGenre = new javax.swing.JLabel();
        lblBookSummary = new javax.swing.JLabel();
        lblBookQuantity = new javax.swing.JLabel();
        lblBookPublisher = new javax.swing.JLabel();
        lblBookAuthor = new javax.swing.JLabel();
        lblPublishDate = new javax.swing.JLabel();
        lblArrivalDate = new javax.swing.JLabel();
        txtBookTitle = new javax.swing.JTextField();
        txtBookGenre = new javax.swing.JTextField();
        txtBookPublisher = new javax.swing.JTextField();
        txtPublishDate = new javax.swing.JFormattedTextField();
        txtArrivalDate = new javax.swing.JFormattedTextField();
        txtBookQuantity = new javax.swing.JFormattedTextField();
        txtBookAuthor = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBookSummary = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Borrowing a Book - unnamed Library Management System");
        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1218, 820));
        setMinimumSize(new java.awt.Dimension(1218, 820));
        setName("borrowFrame"); // NOI18N
        setResizable(false);

        panMain.setBackground(new java.awt.Color(51, 51, 51));
        panMain.setMaximumSize(new java.awt.Dimension(1218, 820));
        panMain.setMinimumSize(new java.awt.Dimension(1218, 820));
        panMain.setPreferredSize(new java.awt.Dimension(1218, 820));
        panMain.setLayout(new java.awt.BorderLayout());

        panTop.setBackground(new java.awt.Color(43, 44, 45));
        panTop.setMaximumSize(new java.awt.Dimension(1218, 160));
        panTop.setMinimumSize(new java.awt.Dimension(1218, 160));
        panTop.setPreferredSize(new java.awt.Dimension(1218, 160));

        cbxClientType.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        cbxClientType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Select>", "Staff", "Student" }));
        cbxClientType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbxClientType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxClientTypeActionPerformed(evt);
            }
        });

        lblClientID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientID.setText("Staff/Student ID:");

        lblBookID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookID.setText("Book ID:");

        try {
            txtBorrowDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBorrowDate.setText("DD/MM/YYYY");
        txtBorrowDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        btnGetDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnGetDate.setText("Get Current Date");
        btnGetDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDateActionPerformed(evt);
            }
        });

        lblBorrowDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBorrowDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBorrowDate.setText("Borrowing Date:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblBorrowID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBorrowID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBorrowID.setText("Borrow ID:");

        lblBorrowDue.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBorrowDue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBorrowDue.setText("Borrow Due On:");

        txtBorrowID.setEditable(false);
        txtBorrowID.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("######"))));
        txtBorrowID.setText("000000");
        txtBorrowID.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        txtBorrowID.setFocusable(false);
        txtBorrowID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N

        txtBorrowDue.setEditable(false);
        txtBorrowDue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtBorrowDue.setText("DD/MM/YYYY");
        txtBorrowDue.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        txtBorrowDue.setFocusable(false);
        txtBorrowDue.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBorrowDue.setMaximumSize(new java.awt.Dimension(126, 31));
        txtBorrowDue.setMinimumSize(new java.awt.Dimension(126, 31));

        btnCancel.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnCancel.setText("Cancel Borrow");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSetDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnSetDate.setText("Set Date");
        btnSetDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDateActionPerformed(evt);
            }
        });

        cbxClientID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        cbxClientID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Client ID" }));
        cbxClientID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbxClientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxClientIDActionPerformed(evt);
            }
        });

        cbxBookID.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        cbxBookID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book ID" }));
        cbxBookID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbxBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBookIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panTopLayout = new javax.swing.GroupLayout(panTop);
        panTop.setLayout(panTopLayout);
        panTopLayout.setHorizontalGroup(
            panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTopLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblClientID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBookID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBorrowDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBorrowID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panTopLayout.createSequentialGroup()
                        .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panTopLayout.createSequentialGroup()
                                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbxClientType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtBorrowDate))
                                .addGap(6, 6, 6)
                                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panTopLayout.createSequentialGroup()
                                        .addComponent(btnSetDate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnGetDate))
                                    .addComponent(cbxClientID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(panTopLayout.createSequentialGroup()
                                .addComponent(txtBorrowID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBorrowDue)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBorrowDue, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 132, Short.MAX_VALUE))
                    .addGroup(panTopLayout.createSequentialGroup()
                        .addComponent(cbxBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 395, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        panTopLayout.setVerticalGroup(
            panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(panTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panTopLayout.createSequentialGroup()
                        .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClientID)
                            .addComponent(cbxClientType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxClientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBookID)
                            .addComponent(cbxBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBorrowDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnGetDate)
                                .addComponent(btnSetDate))
                            .addComponent(lblBorrowDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBorrowID)
                            .addGroup(panTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBorrowID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblBorrowDue)
                                .addComponent(txtBorrowDue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnCancel))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        panMain.add(panTop, java.awt.BorderLayout.PAGE_START);

        panCenter.setBackground(new java.awt.Color(34, 34, 34));
        panCenter.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBackground(new java.awt.Color(34, 34, 34));

        lblClientTitle.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 24)); // NOI18N
        lblClientTitle.setText("Staff/Student Personal Information:");

        lblClientFirstName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientFirstName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientFirstName.setText("First Name:");

        lblClientLastName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientLastName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientLastName.setText("Last Name:");

        lblClientDoB.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientDoB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientDoB.setText("Date of Birth:");

        lblClientGender.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientGender.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientGender.setText("Gender:");

        lblClientPhoneNumber.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientPhoneNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientPhoneNumber.setText("Phone Number:");

        lblClientEmailAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientEmailAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientEmailAddress.setText("Email Address:");

        lblClientHomeAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblClientHomeAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClientHomeAddress.setText("Home Address:");

        txtClientFirstName.setEditable(false);
        txtClientFirstName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientFirstName.setText("First name");
        txtClientFirstName.setFocusable(false);
        txtClientFirstName.setRequestFocusEnabled(false);

        txtClientLastName.setEditable(false);
        txtClientLastName.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientLastName.setText("Last name");
        txtClientLastName.setFocusable(false);
        txtClientLastName.setRequestFocusEnabled(false);

        txtClientDoB.setEditable(false);
        txtClientDoB.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtClientDoB.setText("Date of birth");
        txtClientDoB.setFocusable(false);
        txtClientDoB.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientDoB.setRequestFocusEnabled(false);

        txtClientPhoneNumber.setEditable(false);
        try {
            txtClientPhoneNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtClientPhoneNumber.setText("000000000");
        txtClientPhoneNumber.setFocusable(false);
        txtClientPhoneNumber.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientPhoneNumber.setRequestFocusEnabled(false);

        txtClientHomeAddress.setEditable(false);
        txtClientHomeAddress.setColumns(20);
        txtClientHomeAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientHomeAddress.setLineWrap(true);
        txtClientHomeAddress.setRows(5);
        txtClientHomeAddress.setText("Home address");
        txtClientHomeAddress.setFocusable(false);
        txtClientHomeAddress.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(txtClientHomeAddress);

        txtClientEmailAddress.setEditable(false);
        txtClientEmailAddress.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientEmailAddress.setText("Email address");
        txtClientEmailAddress.setFocusable(false);
        txtClientEmailAddress.setRequestFocusEnabled(false);

        txtClientGender.setEditable(false);
        txtClientGender.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtClientGender.setText("Gender");
        txtClientGender.setFocusable(false);
        txtClientGender.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2)
                    .addComponent(lblClientTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblClientPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientEmailAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientHomeAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientDoB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClientFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtClientGender, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientEmailAddress, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientDoB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientLastName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientFirstName, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(138, 138, 138))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblClientTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientFirstName)
                    .addComponent(txtClientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientLastName)
                    .addComponent(txtClientLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientDoB)
                    .addComponent(txtClientDoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientGender)
                    .addComponent(txtClientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientPhoneNumber)
                    .addComponent(txtClientPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientEmailAddress)
                    .addComponent(txtClientEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClientHomeAddress)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        panCenter.add(jPanel2);

        jPanel3.setBackground(new java.awt.Color(28, 28, 28));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(33, 31, 31));
        jPanel1.setMaximumSize(new java.awt.Dimension(609, 70));
        jPanel1.setMinimumSize(new java.awt.Dimension(609, 70));
        jPanel1.setPreferredSize(new java.awt.Dimension(609, 70));

        btnSubmit.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubmit.setEnabled(false);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(437, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubmit)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnReset))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBackground(new java.awt.Color(28, 28, 28));

        lblBookDetailsTitle.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 24)); // NOI18N
        lblBookDetailsTitle.setText("Book Details:");

        lblBookTitle.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookTitle.setText("Book Title:");

        lblBookGenre.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookGenre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookGenre.setText("Book Genre:");

        lblBookSummary.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookSummary.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookSummary.setText("Book Summary:");

        lblBookQuantity.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookQuantity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookQuantity.setText("Quantity Available:");

        lblBookPublisher.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookPublisher.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookPublisher.setText("Book Publisher:");

        lblBookAuthor.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblBookAuthor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBookAuthor.setText("Book Author:");

        lblPublishDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblPublishDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPublishDate.setText("Book Publish Date:");

        lblArrivalDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        lblArrivalDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblArrivalDate.setText("Book Arrival Date:");

        txtBookTitle.setEditable(false);
        txtBookTitle.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookTitle.setText("Title of the book");
        txtBookTitle.setFocusable(false);
        txtBookTitle.setRequestFocusEnabled(false);

        txtBookGenre.setEditable(false);
        txtBookGenre.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookGenre.setText("Genre of the book");
        txtBookGenre.setFocusable(false);
        txtBookGenre.setRequestFocusEnabled(false);

        txtBookPublisher.setEditable(false);
        txtBookPublisher.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookPublisher.setText("Publisher of the book");
        txtBookPublisher.setFocusable(false);
        txtBookPublisher.setRequestFocusEnabled(false);

        txtPublishDate.setEditable(false);
        txtPublishDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtPublishDate.setText("01/01/2001");
        txtPublishDate.setFocusable(false);
        txtPublishDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtPublishDate.setRequestFocusEnabled(false);

        txtArrivalDate.setEditable(false);
        txtArrivalDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtArrivalDate.setText("01/01/2001");
        txtArrivalDate.setFocusable(false);
        txtArrivalDate.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtArrivalDate.setRequestFocusEnabled(false);

        txtBookQuantity.setEditable(false);
        txtBookQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("######"))));
        txtBookQuantity.setText("0");
        txtBookQuantity.setFocusable(false);
        txtBookQuantity.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookQuantity.setRequestFocusEnabled(false);

        txtBookAuthor.setEditable(false);
        txtBookAuthor.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookAuthor.setText("Author of the book");
        txtBookAuthor.setFocusable(false);
        txtBookAuthor.setRequestFocusEnabled(false);

        txtBookSummary.setEditable(false);
        txtBookSummary.setColumns(20);
        txtBookSummary.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        txtBookSummary.setLineWrap(true);
        txtBookSummary.setRows(3);
        txtBookSummary.setText("Summary of the book");
        txtBookSummary.setFocusable(false);
        txtBookSummary.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(txtBookSummary);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblBookDetailsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator3)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblBookQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblBookPublisher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblBookAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPublishDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblArrivalDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblBookSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblBookTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblBookGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBookQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtArrivalDate, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPublishDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtBookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(txtBookGenre, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBookTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtBookAuthor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 51, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBookDetailsTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookTitle)
                    .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookGenre))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookSummary))
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookQuantity))
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookPublisher))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookAuthor))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPublishDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblArrivalDate))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        panCenter.add(jPanel3);

        panMain.add(panCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(panMain, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // This code handles Client ID behaviour upon selection
    private void cbxClientTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClientTypeActionPerformed
        // TODO add your handling code here:
        clearClient();
        clearBook();
        ctype = cbxClientType.getSelectedIndex(); // Get client type
        
        if (ctype == 0) { // Will reset fields to default appearance
            getClientType();
            setClientOption();
            lblClientID.setText("Staff/Student ID:");
//            txtClientID.setText("Staff/Student ID");
            lblClientTitle.setText("Staff/Student Personal Information:");
//            txtClientID.setEditable(false);
//            txtClientID.setRequestFocusEnabled(false);
//            txtClientID.setFocusable(false);
        } else { // Will display fields according to selected user type
            try { 
                getClientType();
                setClientOption();
                lblClientID.setText(cbxClientType.getSelectedItem().toString() + " ID:");
    //            txtClientID.setText(cbxClientType.getSelectedItem().toString() + " ID");
                lblClientTitle.setText(cbxClientType.getSelectedItem().toString() + " Personal Information:");
    //            txtClientID.setEditable(true);            
    //            txtClientID.setRequestFocusEnabled(true);
    //            txtClientID.setFocusable(true);
            } catch (Exception e) {
            // Popup messagebox to inform user of unexpected error
            }
        }
        fetchedBookClientInfo();
        
    }//GEN-LAST:event_cbxClientTypeActionPerformed

    // This method will fetch the client type
    // Can be used for both client loading or addition
    private void getClientType(){
        ctype = cbxClientType.getSelectedIndex(); // Get client type
        if (ctype <= 0) { // Will disable the list from any user interaction
            lblClientID.setText("Load Existing Client:");
            cspecies = "NUL";
        } else { // Will display fields according to selected user type
            lblClientID.setText("Load Existing " + cbxClientType.getSelectedItem().toString() + ":");
            switch (ctype){
                case 1:
                cspecies = "STA";
                break;
            case 2:
                cspecies = "STU";
                break;
            default:
                cspecies = "NUL";
                break;
            }
            // cbxClientID.setEnabled(true);
            // btnAdd.setEnabled(true);
        }
    }
    
    // This method will set option list for book ID using ComboBoxModel
    private void setClientOption(){
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        cList = new DefaultComboBoxModel();
        String cLabel; // Declared to store title of the selected client type
        switch (cspecies) {
            case "STA":
                cLabel = "Staff";
                break;
            case "STU":
                cLabel = "Student";
                break;
            default:
                cLabel = "Existing";
        }
        // Adding default text
        cList.addElement("Select " + cLabel + " ID");
        cbxClientID.setModel(cList);
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File clienttxt = new File(saveDir + "client.txt");
        Scanner intClient;
        try {
            // This part loads all book information
            intClient = new Scanner(clienttxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intClient.hasNext())
            {
                // Read the next line.
                String bEntry = intClient.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                String temptype = null;
                if (matchedID[0].contains("STA")) {
                    temptype = "STA";
                } else if (matchedID[0].contains("STU")) {
                    temptype = "STU";
                }
                // Get the digits out
                String preOut = matchedID[0].replace(temptype, "");
                // JOptionPane.showMessageDialog(null, preOut);
                // Replace the string part with empty digits, leaving only the prefix
                String numOut = matchedID[0].replace(preOut, "");
                // JOptionPane.showMessageDialog(null, numOut);
                if (i < 200) {
                    if ("false".equals(matchedID[8]) && cspecies.equals(numOut)) {
                        matchedID[0] = matchedID[0].replace(cspecies, "");
                        cList.addElement(matchedID[0]);
                        i++;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Maximum client entry limit reached! Stopping at 200th record.", "Client list maxed out!", JOptionPane.ERROR_MESSAGE);
                    break;
                }
            }
            // OptionPane.showMessageDialog(null, i);
            intClient.close();
            // Check if there are no clients at all for each type
            if (cList.getSize() == 1) {
                cList.removeAllElements();
                cList.addElement("No client(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cbxClientID.setModel(cList);
            // Select index 0 as default
            cbxClientID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
        
    // Main method of this page as the booking details created and saved here
    // Files include borrowing details, and staff/student information
    // book details will be rewritten with new information about available quantity
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        // Declaring file extension used
        ext = ".txt";        
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("000000");
        try {
            // Fetching IDs from the textfields
            brID = dc.format(Integer.parseInt(txtBorrowID.getText()));
            cID = dc.format(Integer.parseInt((String) cbxClientID.getSelectedItem()));
            bID = dc.format(Integer.parseInt((String) cbxBookID.getSelectedItem()));
            // Storing Borrowing entries into variables
            // Check if the date is unset or left empty
            if ("".equals(txtBorrowDate.getText()) | "DD/MM/YYYY".equals(txtBorrowDate.getText())) {
                JOptionPane.showMessageDialog(null, "Borrowing date is empty or invalid! Autosetting value to today's date", "Invalid borrowing date!", JOptionPane.ERROR_MESSAGE);
                btnGetDate.doClick();
            }
            // Storing date values
            String bdate = txtBorrowDate.getText();
            String ddate = txtBorrowDue.getText();
//            
//            String bqty = txtAmountBorrowed.getText();
//            // Checking if book quantity to be borrowed is 0
//            if ("".equals(txtAmountBorrowed.getText())) {
//                JOptionPane.showMessageDialog(null, "Book quantity to be borrowed cannot be 0! Autosetting value to 1.", "Invalid book quantity!", JOptionPane.ERROR_MESSAGE);
//                bqty = "1";
//                txtAmountBorrowed.setText("1");
//            }
//            // Checking if book quantity exceeded 2
//            if (Integer.parseInt(txtAmountBorrowed.getText()) > 1) {
//                JOptionPane.showMessageDialog(null, "Book quantity to be borrowed cannot exceed 1! Resetting value to 1.", "Invalid book quantity!", JOptionPane.ERROR_MESSAGE);
//                bqty = "1";
//                txtAmountBorrowed.setText("1");
//            }
            // Storing Staff/Student entries into variables
            // For debugging use only!
            /*
            String cFirstName = txtClientFirstName.getText();
            String cLastName = txtClientLastName.getText();
            String cDoB = txtClientDoB.getText();
            String cGender = txtClientGender.getText();
            String cPhoneNumber = txtClientPhoneNumber.getText();
            String cEmailAddress = txtClientEmailAddress.getText();
            String cHomeAddress = txtClientHomeAddress.getText();
            */
            // Storing book quantity changes
            // For debugging use only!
            /*
            String bTitle = txtBookTitle.getText();
            String bGenre = txtBookGenre.getText();
            String bSummary = txtBookSummary.getText();
            String bQuantity = txtBookQuantity.getText();
            String bPublisher = txtBookAuthor.getText();
            String bAuthor = txtBookPublisher.getText();
            String bPublishDate = txtPublishDate.getText();
            String bArrivalDate = txtArrivalDate.getText();
            */
            // Getting new amount of books available after borrow
            String newqty = String.valueOf(Integer.parseInt(txtBookQuantity.getText()) - 1);
            if (Integer.parseInt(newqty) >= 0) {
                // FOR DEBUGGING ONLY
                /* File f = new File(saveDir + "test.txt");
                try {
                    f.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, newqty);
                */
                // FileWriter and PrintWriter to create and write into textfiles
                try {
                    // FileWriter cd = new FileWriter(saveDir + "client.txt", true); // FileWriter for staff/student info
                    // PrintWriter cdp = new PrintWriter(cd); // PrintWriter for staff/student info
                    FileWriter brd = new FileWriter(saveDir + "borrowing.txt", true); // FileWriter for borrowing details
                    PrintWriter brdp = new PrintWriter(brd); //PrintWriter for borrowing details
                    // To print the line into Borrowing textfile
                    brdp.println(brpfix + brID + ":" +
                                 cspecies + cID + ":" +
                                 bpfix + bID + ":" +
                                 bdate + ":" +
                                 ddate + ":" +
                                 "1" + ":" + 
                                 "false" + ":" +
                                 "false" + ":" +
                                 "false" + ":" + 
                                 "0.00" + ":" +
                                 "01/01/1990"); // false to indicate hasn't returned status while false indicate is not overdue status and another false to say it hasn't been renewed and 0 to specify null fine amount
                                                // final column (11) is placeholder for return date
                    brdp.close();
                    // To print the line into Client textfile
                    // For debugging only!
                    /*
                    cdp.println(cspecies + cID + ":" +
                                cFirstName + ":" + 
                                cLastName + ":" +
                                cDoB + ":" +
                                cGender + ":" + 
                                cPhoneNumber + ":" +
                                cEmailAddress + ":" + 
                                cHomeAddress);
                    cdp.close();
                    */
                    // To print the line into Book textfile
                    // is Temporary and used for debugging only!
                    /*
                    bdp.println(bID + ":" +
                                bTitle + ":" + 
                                bGenre + ":" +
                                bSummary + ":" +
                                bQuantity + ":" +
                                bPublisher + ":" +
                                bAuthor + ":" +
                                bPublishDate + ":" +
                                bArrivalDate);
                    bdp.close();
                    */
                    // To rename original book.txt to book.bak
                    File bookOri = new File(saveDir + "book.txt");
                    File bookBak = new File(saveDir + "bookBak.txt");
                    // To check if bookBak.txt is present or not
                    if (!bookBak.exists()){
                        bookOri.createNewFile();
                    }
                    // This is for debugging only!
                    // JOptionPane.showMessageDialog(null, "renamed");
                    // This is to rename the existing book.txt to bookBak.txt
                    bookOri.renameTo(bookBak);
                    // This is to open, find and replace a specific book record
                    // Requires temporary file to store current state
                    // FileWriter to write into a new file called book.txt
                    FileWriter bd = new FileWriter(saveDir + "book.txt"); 
                    // PrintWriter to print into book.txt
                    PrintWriter bdp = new PrintWriter(bd); 
                    // This is to open and read bookBak.txt 
                    File booktxt = new File(saveDir + "bookBak.txt");
                    // This is to instantiate the file opened earlier
                    Scanner inputFile = new Scanner(booktxt);
                    // This array is to contain all lines
                    String[] matchedID;
                    // This is only for debugging!
                    // boolean itWorked = false;
                    // Read lines from the file until no more are left.
                    while (inputFile.hasNext())
                    {
                        // This is for debugging only!
                        // JOptionPane.showMessageDialog(null, "In loop");
                        // Read the next line.
                        String bEntry = inputFile.nextLine();
                        // Split the line by using the delimiter ":" (semicolon) and store into array.
                        matchedID = bEntry.split(":");
                        // Check if the read line has current book ID
                        if (matchedID[0].equals(bpfix + bID)) {
                            // itWorked = true;
                            // Reassign the quantity to a new value
                            matchedID[4] = newqty;
                        }
                        // Rewrite the new book.txt with values found in bookBak.txt
                        bdp.println(matchedID[0] + ":" +
                                    matchedID[1] + ":" +
                                    matchedID[2] + ":" +
                                    matchedID[3] + ":" +
                                    matchedID[4] + ":" +
                                    matchedID[5] + ":" +
                                    matchedID[6] + ":" +
                                    matchedID[7] + ":" +
                                    matchedID[8] + ":" +
                                    "false");

                    }
                    // Close the bookBak.txt reader
                    inputFile.close();
                    // This deletes bookBak.txt
                    bookBak.delete();
                    // This is for debugging only!
                    /* if (bookBak.delete()) {
                        JOptionPane.showMessageDialog(null, "deleted");
                    }*/
                    // This closes the book.txt printer 
                    bdp.close();
                    /* if (itWorked) {
                        JOptionPane.showMessageDialog(null, "Yes it worked");
                    }*/
                    // To display completed borrowing process status
                    JOptionPane.showMessageDialog(null, "Successfully booked! Press OK to return to borrowing form.", "Borrowing succeeded!", JOptionPane.INFORMATION_MESSAGE);
                    btnCancel.setText("Return");
                    // To refresh new ID 
                    borrowIncrementor();
                    // To reload the book information
                    cbxBookID.setSelectedIndex(cbxBookID.getSelectedIndex());
                    // JOptionPane.showMessageDialog(null, fetchedBook + " " + fetchedClient + " " + selectedDate);
                } catch (IOException ex) {
                    Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Requested number of books to borrow exceeded available number! Please reduce to exactly or below the available number to proceed with borrowing..", "Insufficient number of books to lend!", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    // Method to set borrow date to today and add borrowing due date automatically
    private void btnGetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDateActionPerformed
        // TODO add your handling code here:
        // To get current date
        Calendar bdate = Calendar.getInstance();
        SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy");
        
        // To display date into borrow date textfield
        txtBorrowDate.setText(datef.format(bdate.getTime()));
        
        // To add 2 weeks for due date
        bdate.add(Calendar.DAY_OF_MONTH, 14);
        
        // To display date into due date textfield
        txtBorrowDue.setText(datef.format(bdate.getTime()));
        
        // To highlight the due date
        lblBorrowDue.setForeground(Color.red);
        
        selectedDate = true;
        
        fetchedBookClientInfo();
        
    }//GEN-LAST:event_btnGetDateActionPerformed

    // This method handles borrow cancellation
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selection = JOptionPane.showConfirmDialog(null, "Closing this form now will cancel the ongoing borrowing process. Continue?", "Cancelling Borrowing Process", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            new unnamedMainMenu().setVisible(true);
            this.dispose();
        } 
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        lblBorrowDue.setForeground(fgtxt);
        lblBookQuantity.setForeground(fgtxt);
        clearClient();
        clearBook();
        fetchedBookClientInfo();
    }//GEN-LAST:event_btnResetActionPerformed

    // This method handles manual borrow date setting
    private void setBorrowDate(){
        // Default dd/MM/yyyy formatter for Joda LocalDate instances
        DateTimeFormatter datef = DateTimeFormat.forPattern("dd/MM/yyyy");
        
        // To add 14 days to the inserted date
        DateTime ddate = DateTime.parse(txtBorrowDate.getText(), datef);
        ddate = ddate.plusDays(14);
        
        
        // To display date into due date textfield
        txtBorrowDue.setText(ddate.toString(datef));
        
        // To highlight the due date
        lblBorrowDue.setForeground(Color.red);
        
    }
    
    private void btnSetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDateActionPerformed
        // TODO add your handling code here:
        try {
            setBorrowDate();
            selectedDate = true;
            fetchedBookClientInfo();
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Invalid input! Date must follow the format: DD/MM/YYYY", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSetDateActionPerformed

    private void cbxClientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClientIDActionPerformed
        // TODO add your handling code here:
        // Continue with client loading code from client menu
        // Clear previous fields value
        clearClient();
        // Loads index with Book ID only
        if (cbxClientID.getSelectedIndex() > 0) {
            loadClientID();
        }
        fetchedBookClientInfo();
    }//GEN-LAST:event_cbxClientIDActionPerformed

    private void cbxBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBookIDActionPerformed
        // TODO add your handling code here:
        // Clear previous fields value
        // This method called here also clears
        // selectedDate flag. Unintentional feature but a welcome one
        clearBook();
        // Loads index with Book ID only
        if (cbxBookID.getSelectedIndex() != 0 && cbxBookID.getSelectedIndex() != -1) {
            loadBookID();
        }
        fetchedBookClientInfo();
    }//GEN-LAST:event_cbxBookIDActionPerformed

    // This method will load the selected book ID
    private void loadBookID(){
        // Assigning the bID to the selected index value
        bID = (String) cbxBookID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        boolean qty0 = false;
        fetchedBook = false;
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File booktxt = new File(saveDir + "book.txt");
        Scanner intBook;
        try {
            // This part loads all book information
            intBook = new Scanner(booktxt);
            // Read lines from the file until no more are left.
            while (intBook.hasNext())
            {
                // Read the next line.
                String bEntry = intBook.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace("BOO", "");
                // JOptionPane.showMessageDialog(null, i);
                if (cbxBookID.getSelectedItem().equals(matchedID[0])) {
                    fetchedBook = true;
                    txtBookTitle.setText(matchedID[1]);
                    txtBookGenre.setText(matchedID[2]);
                    txtBookSummary.setText(matchedID[3]);
                    txtBookQuantity.setText(matchedID[4]);
                    txtBookPublisher.setText(matchedID[5]);
                    txtBookAuthor.setText(matchedID[6]);
                    txtPublishDate.setText(matchedID[7]);
                    txtArrivalDate.setText(matchedID[8]);
                     if (Integer.parseInt(matchedID[4]) <= 0) {
                        qty0 = true;
                    } 
                }
            }
            // OptionPane.showMessageDialog(null, i);
            intBook.close();
            if (qty0) { // Check and see if the quantity of book is 0
                lblBookQuantity.setForeground(Color.yellow);
                fetchedBook = false;
                JOptionPane.showMessageDialog(null, "There is not enough book of this title available for borrowing!", "Book quantity is 0!", JOptionPane.ERROR_MESSAGE);
                qty0 = false;
            }
            fetchedBookClientInfo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // This method will load the selected book ID
    private void loadClientID(){
        // Assigning the cID to the selected index value
        cID = (String) cbxClientID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        fetchedClient = false;
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File clienttxt = new File(saveDir + "client.txt");
        Scanner intClient;
        try {
            // This part loads all book information
            intClient = new Scanner(clienttxt);
            // Read lines from the file until no more are left.
            while (intClient.hasNext())
            {
                // Read the next line.
                String bEntry = intClient.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace(cspecies, "");
                // JOptionPane.showMessageDialog(null, i);
                if (cbxClientID.getSelectedItem().equals(matchedID[0])) {
                    fetchedClient = true;
                    txtClientFirstName.setText(matchedID[1]);
                    txtClientLastName.setText(matchedID[2]);
                    txtClientDoB.setText(matchedID[3]);
                    txtClientGender.setText(matchedID[4]);
                    txtClientPhoneNumber.setText(matchedID[5]);
                    txtClientEmailAddress.setText(matchedID[6]);
                    txtClientHomeAddress.setText(matchedID[7]);
                }
            }
            intClient.close();
            fetchedBookClientInfo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // This method clears book related fields
    private void clearClient(){
        // To clean up previous or default values from fields
        fetchedClient = false;
        txtClientFirstName.setText("");
        txtClientLastName.setText("");
        txtClientDoB.setText("");
        txtClientGender.setText("");
        txtClientPhoneNumber.setText("");
        txtClientEmailAddress.setText("");
        txtClientHomeAddress.setText("");
        cID = "";
    }
    
    private void clearBook(){
        fetchedBook = false;
        selectedDate = false;
        txtBorrowDate.setText("");
        txtBorrowDue.setText("");
        txtBookTitle.setText("");
        txtBookGenre.setText("");
        txtBookSummary.setText("");
        txtBookQuantity.setText("");
        txtBookPublisher.setText("");
        txtBookAuthor.setText("");
        txtPublishDate.setText("");
        txtArrivalDate.setText("");
        bID = "";
        brID = "";
        lblBookQuantity.setForeground(fgtxt);
        lblBorrowDue.setForeground(fgtxt);
    }
    
    
    private void fetchedBookClientInfo(){
        if (fetchedBook && fetchedClient && selectedDate) {
            btnSubmit.setEnabled(true);
        } else {
            btnSubmit.setEnabled(false);
        }
    }
    
    // This method will check through borrowing.txt and look for latest ID and increments from there
    private void borrowIncrementor(){
        DecimalFormat dc = new DecimalFormat("000000");
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        try {
            saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
            // For debugging purpose only
            // JOptionPane.showMessageDialog(null, bID);
            File booktxt = new File(saveDir + "borrowing.txt");
            Scanner inputFile;
            try {
                String lastBookID;
                inputFile = new Scanner(booktxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext())
                {
                   // Read the next line.
                   String bEntry = inputFile.nextLine();
                   // Split the line by using the delimiter ":" (semicolon) and store into array.
                   matchedID = bEntry.split(":");
                   matchedID[0] = matchedID[0].replace("BOR", "");
                }
                inputFile.close();
                int newBorrowID;
                if (matchedID == null) {
                    JOptionPane.showMessageDialog(null, "No borrow(s) record found! Restarting database entry.", "Borrow database is empty!", JOptionPane.ERROR_MESSAGE);
                    newBorrowID = 1;
                } else {
                    newBorrowID = Integer.parseInt(matchedID[0]) + 1;
                }
                txtBorrowID.setText(dc.format(newBorrowID));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Invalid input! Book ID can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // This method will set option list for book ID using ComboBoxModel
    private void setBookOption(){
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        bkList = new DefaultComboBoxModel();
        // Adding default text
        bkList.addElement("Select Book ID");
        cbxBookID.setModel(bkList);
        saveDir = System.getProperty("user.dir") + "\\src\\localdb\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File booktxt = new File(saveDir + "book.txt");
        Scanner intBook;
        try {
            // This part loads all book information
            intBook = new Scanner(booktxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intBook.hasNext())
            {
                // Read the next line.
                String bEntry = intBook.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace("BOO", "");
                if (i < 200) {
                    if ("false".equals(matchedID[9])) {
                        bkList.addElement(matchedID[0]);
                        i++;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Maximum book entry limit reached! Stopping at 200th record.", "Book list maxed out!", JOptionPane.ERROR_MESSAGE);
                    break;
                }
            }
            // OptionPane.showMessageDialog(null, i);
            intBook.close();
            // Check if there are no clients at all for each type
            if (bkList.getSize() == 1) {
                bkList.removeAllElements();
                bkList.addElement("No book(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cbxBookID.setModel(bkList);
            // Select index 0 as default
            cbxBookID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initGUI(){
        // This anon class handles window closing event
        borrowIncrementor();
        // Load all book ID into combobox
        setBookOption();
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize FlatDarkLaf");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new unnamedBorrowMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGetDate;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSetDate;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cbxBookID;
    private javax.swing.JComboBox<String> cbxClientID;
    private javax.swing.JComboBox<String> cbxClientType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblArrivalDate;
    private javax.swing.JLabel lblBookAuthor;
    private javax.swing.JLabel lblBookDetailsTitle;
    private javax.swing.JLabel lblBookGenre;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblBookPublisher;
    private javax.swing.JLabel lblBookQuantity;
    private javax.swing.JLabel lblBookSummary;
    private javax.swing.JLabel lblBookTitle;
    private javax.swing.JLabel lblBorrowDate;
    private javax.swing.JLabel lblBorrowDue;
    private javax.swing.JLabel lblBorrowID;
    private javax.swing.JLabel lblClientDoB;
    private javax.swing.JLabel lblClientEmailAddress;
    private javax.swing.JLabel lblClientFirstName;
    private javax.swing.JLabel lblClientGender;
    private javax.swing.JLabel lblClientHomeAddress;
    private javax.swing.JLabel lblClientID;
    private javax.swing.JLabel lblClientLastName;
    private javax.swing.JLabel lblClientPhoneNumber;
    private javax.swing.JLabel lblClientTitle;
    private javax.swing.JLabel lblPublishDate;
    private javax.swing.JPanel panCenter;
    private javax.swing.JPanel panMain;
    private javax.swing.JPanel panTop;
    private javax.swing.JFormattedTextField txtArrivalDate;
    private javax.swing.JTextField txtBookAuthor;
    private javax.swing.JTextField txtBookGenre;
    private javax.swing.JTextField txtBookPublisher;
    private javax.swing.JFormattedTextField txtBookQuantity;
    private javax.swing.JTextArea txtBookSummary;
    private javax.swing.JTextField txtBookTitle;
    private javax.swing.JFormattedTextField txtBorrowDate;
    private javax.swing.JFormattedTextField txtBorrowDue;
    private javax.swing.JFormattedTextField txtBorrowID;
    private javax.swing.JFormattedTextField txtClientDoB;
    private javax.swing.JTextField txtClientEmailAddress;
    private javax.swing.JTextField txtClientFirstName;
    private javax.swing.JTextField txtClientGender;
    private javax.swing.JTextArea txtClientHomeAddress;
    private javax.swing.JTextField txtClientLastName;
    private javax.swing.JFormattedTextField txtClientPhoneNumber;
    private javax.swing.JFormattedTextField txtPublishDate;
    // End of variables declaration//GEN-END:variables
}
